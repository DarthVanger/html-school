export const VariablesLecture = () => {
  return `
    <figure>
      <video controls>
      <source src="/video/variables-lecture.mp4" type="video/mp4" />
      </video>
      <figcaption>Variables lecture</figcaption>
    </figure>
    <p>РУССКИЙ ИДИ НАХУЙ</p>
    <p>НО блятб... На Укр еще нихто не перевел))</p>

    <p>Хоч - перводи :))</p>
    <p>Бдуеш як Тарас Шевченко винаходити Українськоу мову заново ) Бо хуй знає як буде statement, expression, та інша єбала на укр)))

    <figure>
      <img src="/src/Quiz/Variables/it-army-help-translate.jpg" />
      <figcaption>Стань АйТі-Тарасом_Шевеченком! Допомжи Курсері перекласти лекцію Українською!!!111</figcaption>
    </figure>

    <figure>
      <img src="/src/Quiz/Variables/ukrainisation-meme.png" />
    </figure>

    <h3>Русский первод лекции про Пельменные</h3>
    <p>
      [ПУСТОЙ ЗВУК]. Мы начнем учиться выполнять код с самыми основными операциями в C и создавать более сложные операторы оттуда. Здесь у нас есть два объявления переменных, один для int называется x, а затем один для int называется y. Если мы выполним первый оператор, мы создадим поле с меткой x. Переменная x неинициализирована, поэтому мы поместите вопросительный знак в поле для его значения. Если мы выполним второй оператор, мы создадим еще один ящик с меткой y, который также неинициализирован. Неинициализированные переменные плохие, , так как они приводят к ошибкам в вашем коде, которые могут быть трудно найти и исправить.
    </p>
    <p>
      Теперь рассмотрим другой пример, который инициализирует переменные. Здесь, первый оператор объявляет int называется x. Выполнение его ведет себя точно так же, как и раньше. Мы сделали коробку для x, которая в ней имеет неизвестное значение. Однако следующая строка кода присваивает 4 x. Выполнение этой строки ставит 4 в поле для x. Теперь x инициализируется, и мы знаем, что она имеет значение 4. Следующая строка показывает объявление и инициализацию , объединенные в один оператор. Выполнение его создает поле для y и помещает значение 6 в это поле.
    </p>
    <p>
      Конечно, переменные полезны только в том случае, если вы используете значения, которые у них есть. Здесь код сначала объявляет x и инициализирует его на 4. Давайте выполним это заявление. Далее он объявляет y и инициализирует его в x + 2. Чтобы выполнить это утверждение, мы должны оценить выражение на правой стороне знака равенства, x равно 4, поэтому x + 2 равно 6. Мы создаем коробку для y и помещаем в нее 6. Последний оператор создает переменную z и инициализирует ее в y- x. Как вы могли бы ожидать, вы возьмете значение y, которое равно 6 и значение x, которое равно 4, и вычитаете их, чтобы получить 2. Затем вы создадите поле для z и инициализируете его до 2. Отлично, теперь вы знаете, как выполнять код с объявлениями переменных и инструкциями присваивания
    </p>
  `
};
